import javax.swing.*;
import java.awt.*;
import java.util.*;

public class UnaSolucionInterfaz extends JPanel {

    static final int N = 6; // Tamaño del tablero
    static int[][] tablero = new int[N][N];
    static boolean encontrada = false;

    static int[] dx = {-2, -1, 1, 2, 2, 1, -1, -2};
    static int[] dy = {1, 2, 2, 1, -1, -2, -2, -1};

    static int caballoX, caballoY;
    static final int TAM_CASILLA = 80;

    public static void main(String[] args) throws InterruptedException {
        JFrame ventana = new JFrame("Caballo - Una solución");
        UnaSolucionInterfaz panel = new UnaSolucionInterfaz();
        ventana.add(panel);
        ventana.setSize(N * TAM_CASILLA + 16, N * TAM_CASILLA + 39);
        ventana.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        ventana.setLocationRelativeTo(null);
        ventana.setVisible(true);

        for (int i = 0; i < N; i++)
            Arrays.fill(tablero[i], 0);

        Random rand = new Random();
        caballoX = rand.nextInt(N);
        caballoY = rand.nextInt(N);
        tablero[caballoX][caballoY] = 1;

        panel.repaint();
        Thread.sleep(500);

        resolver(caballoX, caballoY, 2, panel);

        if (encontrada) {
            JOptionPane.showMessageDialog(ventana, "¡Se encontró una solución!");
        } else {
            JOptionPane.showMessageDialog(ventana, "No se encontró ninguna solución.");
        }
    }

    static void resolver(int x, int y, int paso, UnaSolucionInterfaz panel) throws InterruptedException {
        if (encontrada) return;
        if (paso == N * N + 1) {
            encontrada = true;
            return;
        }

        ArrayList<int[]> movimientos = new ArrayList<>();
        for (int i = 0; i < 8; i++) {
            int nx = x + dx[i], ny = y + dy[i];
            if (esValido(nx, ny)) {
                int grado = contarMovimientosDisponibles(nx, ny);
                movimientos.add(new int[]{nx, ny, grado});
            }
        }

        movimientos.sort(Comparator.comparingInt(a -> a[2]));

        for (int[] mov : movimientos) {
            int nx = mov[0], ny = mov[1];
            tablero[nx][ny] = paso;
            caballoX = nx;
            caballoY = ny;
            panel.repaint();
            Thread.sleep(300);
            resolver(nx, ny, paso + 1, panel);
            if (encontrada) return;
            tablero[nx][ny] = 0;
            panel.repaint();
            Thread.sleep(100);
        }
    }

    static boolean esValido(int x, int y) {
        return x >= 0 && y >= 0 && x < N && y < N && tablero[x][y] == 0;
    }

    static int contarMovimientosDisponibles(int x, int y) {
        int count = 0;
        for (int i = 0; i < 8; i++) {
            int nx = x + dx[i], ny = y + dy[i];
            if (esValido(nx, ny)) count++;
        }
        return count;
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                g.setColor((i + j) % 2 == 0 ? Color.WHITE : Color.LIGHT_GRAY);
                g.fillRect(j * TAM_CASILLA, i * TAM_CASILLA, TAM_CASILLA, TAM_CASILLA);

                if (tablero[i][j] != 0) {
                    g.setColor(Color.BLACK);
                    g.setFont(new Font("Arial", Font.BOLD, 20));
                    g.drawString(String.valueOf(tablero[i][j]),
                        j * TAM_CASILLA + TAM_CASILLA / 2 - 10,
                        i * TAM_CASILLA + TAM_CASILLA / 2 + 7);
                }
            }
        }

        // Dibujar al caballo
        g.setColor(Color.RED);
        g.fillOval(caballoY * TAM_CASILLA + 20, caballoX * TAM_CASILLA + 20, 40, 40);
    }
}

