import java.util.*;

public class PrimeraSolucion {



    static final int N = 8; // Tamaño del tablero
    static int[][] tablero = new int[N][N];

    // Movimientos posibles del caballo
    static int[] dx = {-2, -1, 1, 2, 2, 1, -1, -2};
    static int[] dy = {1, 2, 2, 1, -1, -2, -2, -1};

    public static void main(String[] args) throws InterruptedException {
        // Inicializar tablero a 0
        for (int i = 0; i < N; i++)
            Arrays.fill(tablero[i], 0);

        // Posición inicial aleatoria
        Random rand = new Random();
        int x = rand.nextInt(N);
        int y = rand.nextInt(N);
        tablero[x][y] = 1; // Primer paso

        // Hacer el recorrido
        for (int paso = 2; paso <= N * N; paso++) {
            int[] siguiente = siguienteMovimiento(x, y);
            if (siguiente == null) {
                System.out.println("No se encontró una solución completa.");
                return;
            }
            x = siguiente[0];
            y = siguiente[1];
            tablero[x][y] = paso;

            imprimirTablero(x, y);
            Thread.sleep(0); // Pausa para simular animación
        }

        System.out.println("¡Recorrido completo encontrado!");
    }

    // Encuentra el siguiente movimiento según Warnsdorff
    static int[] siguienteMovimiento(int x, int y) {
        int minGrado = 9;
        int[] mejorMovimiento = null;

        for (int i = 0; i < 8; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (esValido(nx, ny)) {
                int grado = contarMovimientosDisponibles(nx, ny);
                if (grado < minGrado) {
                    minGrado = grado;
                    mejorMovimiento = new int[]{nx, ny};
                }
            }
        }
        return mejorMovimiento;
    }

    // Cuenta movimientos válidos desde una casilla dada
    static int contarMovimientosDisponibles(int x, int y) {
        int count = 0;
        for (int i = 0; i < 8; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (esValido(nx, ny)) count++;
        }
        return count;
    }

    // Verifica si la casilla está dentro del tablero y no ha sido visitada
    static boolean esValido(int x, int y) {
        return x >= 0 && y >= 0 && x < N && y < N && tablero[x][y] == 0;
    }

    // Imprime el tablero en consola con efecto visual
    static void imprimirTablero(int caballoX, int caballoY) {
        System.out.println("\n======================");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (i == caballoX && j == caballoY) {
                    System.out.print(" o "); // Caballo actual
                } else if (tablero[i][j] == 0) {
                    System.out.print(" . "); // Casilla no visitada
                } else {
                    System.out.printf("%2d ", tablero[i][j]); // Paso ya hecho
                }
            }
            System.out.println();
        }
    }

}
