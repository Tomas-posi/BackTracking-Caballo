import java.util.Arrays;
import java.util.Random;

public class PrimeraSolucion {
	
	public static final int N = 7;
	public static int[][] tablero = new int[N][N];
	private static final int[] dx = {-2, -1, 1, 2, 2, 1, -1, -2};
	private static final int[] dy = {1, 2, 2, 1, -1, -2, -2, -1};
	 public static void main(String[] args) {
	        long inicioTiempo = System.currentTimeMillis(); // Tiempo inicial
	        iniciarSolucion();
	        long finTiempo = System.currentTimeMillis(); // Tiempo final

	        System.out.println("Tiempo de ejecución: " + (finTiempo - inicioTiempo) + " ms");
	    }

	public static void iniciarSolucion() {
		for (int i = 0; i < N; i++) {
			Arrays.fill(tablero[i], 0);
		}
		
		Random rand = new Random();
		int x = 1;
		int y = 1;
		tablero[x][y] = 1;
		System.out.println("Posición inicial: " + x + "," + y);
		
		if (buscarPrimeraSolucion(x, y, 2)) {
			System.out.println("¡Recorrido completo encontrado!");
		} else {
			System.out.println("No se encontró una solución completa.");
		}
	}

	private static boolean buscarPrimeraSolucion(int x, int y, int paso) {
        if (paso == N * N + 1) return true;

        int i = 0;
        boolean encontrado = false;

        while (i < 8 && !encontrado) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (esValido(nx, ny)) {
                tablero[nx][ny] = paso;
                if (buscarPrimeraSolucion(nx, ny, paso + 1)) {
                    encontrado = true;
                } else {
                    tablero[nx][ny] = 0; // backtrack
                }
            }
            i++;
        }
        return encontrado;
    }

	private static boolean esValido(int x, int y) {
		return x >= 0 && y >= 0 && x < N && y < N && tablero[x][y] == 0;
	}

}
