import java.util.Arrays;
import java.util.Random;

public class PrimeraSolucion {
	
	public static final int N = 6;
	public static int[][] tablero = new int[N][N];
	private static final int[] dx = {-2, -1, 1, 2, 2, 1, -1, -2};
	private static final int[] dy = {1, 2, 2, 1, -1, -2, -2, -1};

	public static void iniciarSolucion() {
		for (int i = 0; i < N; i++) {
			Arrays.fill(tablero[i], 0);
		}
		
		Random rand = new Random();
		int x = rand.nextInt(N);
		int y = rand.nextInt(N);
		tablero[x][y] = 1;
		System.out.println("Posición inicial: " + (x + 1) + "," + (y + 1));
		
		if (buscarPrimeraSolucion(x, y, 2)) {
			System.out.println("¡Recorrido completo encontrado!");
		} else {
			System.out.println("No se encontró una solución completa.");
		}
	}

	private static boolean buscarPrimeraSolucion(int x, int y, int paso) {
		if (paso == N * N + 1) return true;

		for (int i = 0; i < 8; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (esValido(nx, ny)) {
				tablero[nx][ny] = paso;
				if (buscarPrimeraSolucion(nx, ny, paso + 1)) return true;
				tablero[nx][ny] = 0; // backtrack
			}
		}return false;
	}

	private static boolean esValido(int x, int y) {
		return x >= 0 && y >= 0 && x < N && y < N && tablero[x][y] == 0;
	}

}
