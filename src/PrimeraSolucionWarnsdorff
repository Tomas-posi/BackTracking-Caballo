import java.util.*;

public class PrimeraSolucionWarnsdorff {

    public static final int N = 7;
    public static int[][] tablero = new int[N][N];
    private static final int[] dx = {-2, -1, 1, 2, 2, 1, -1, -2};
    private static final int[] dy = {1, 2, 2, 1, -1, -2, -2, -1};

    public static void main(String[] args) {
        long inicioTiempo = System.currentTimeMillis(); // Tiempo inicial
        iniciarSolucion();
        long finTiempo = System.currentTimeMillis(); // Tiempo final

        System.out.println("Tiempo de ejecución: " + (finTiempo - inicioTiempo) + " ms");
    }

    public static void iniciarSolucion() {
        for (int i = 0; i < N; i++) {
            Arrays.fill(tablero[i], 0);
        }

        int x = 1;
        int y = 1;
        tablero[x][y] = 1;

        System.out.println("Posición inicial: (" + x + ", " + y + ")");

        if (buscarPrimeraSolucion(x, y, 2)) {
            System.out.println("\n¡Solución encontrada!");
        } else {
            System.out.println("\nNo se encontró una solución completa.");
        }
    }

    private static boolean buscarPrimeraSolucion(int x, int y, int paso) {
        if (paso == N * N + 1) return true;

        int minGrado = 9;
        int mejorX = -1, mejorY = -1;

        // Buscar el movimiento con menor grado de libertad (menos opciones futuras)
        int i = 0;
        while (i < 8) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (esValido(nx, ny)) {
                int grado = contarMovimientosDisponibles(nx, ny);
                if (grado < minGrado) {
                    minGrado = grado;
                    mejorX = nx;
                    mejorY = ny;
                }
            }
            i++;
        }

        if (mejorX == -1) {
            // No hay movimientos válidos, retrocede
            return false;
        }

        // Intentar primero el mejor movimiento según Warnsdorff
        tablero[mejorX][mejorY] = paso;
        boolean encontrado = buscarPrimeraSolucion(mejorX, mejorY, paso + 1);
        if (encontrado) return true;
        tablero[mejorX][mejorY] = 0; // Retroceder

        // Si falla, intenta los demás movimientos en cualquier orden
        i = 0;
        while (i < 8) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (esValido(nx, ny) && !(nx == mejorX && ny == mejorY)) {
                tablero[nx][ny] = paso;
                encontrado = buscarPrimeraSolucion(nx, ny, paso + 1);
                if (encontrado) return true;
                tablero[nx][ny] = 0; // Retroceder
            }
            i++;
        }
        return false;
    }

    private static int contarMovimientosDisponibles(int x, int y) {
        int cuenta = 0;
        for (int i = 0; i < 8; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (esValido(nx, ny)) cuenta++;
        }
        return cuenta;
    }

    private static boolean esValido(int x, int y) {
        return x >= 0 && y >= 0 && x < N && y < N && tablero[x][y] == 0;
    }
}
